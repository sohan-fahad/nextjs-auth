// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id         Int               @id @default(autoincrement())
  email      String            @unique
  password   String
  name       String?
  createdAt  DateTime?         @default(now())
  updatedAt  DateTime?         @updatedAt
  orders     Order[]
  products   Product[]
  tables     RestaurantTable[]
  categories Category[]
  images     Image[]
}

model RestaurantTable {
  id             String      @id @default(uuid())
  title          String
  isBusy         Boolean     @default(false)
  isActive       Boolean     @default(false)
  orders         Order[]
  restaurantInfo Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId   Int?
}

model Category {
  id             String      @id @default(uuid())
  title          String
  slug           String      @unique
  isActive       Boolean     @default(true)
  image          String?
  products       Product[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  restaurantInfo Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId   Int?
}

model Product {
  id              String                 @id @default(uuid())
  title           String
  slug            String                 @unique
  isActive        Boolean                @default(true)
  description     String?
  mrp             Float                  @default(0)
  stock           Int                    @default(0)
  remainingStock  Int                    @default(0)
  isStockout      Boolean                @default(false)
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  Category        Category?              @relation(fields: [categoryId], references: [id])
  categoryId      String
  variants        ProductVariant[]
  variantsOptions ProductVariantOption[]
  restaurantInfo  Restaurant?            @relation(fields: [restaurantId], references: [id])
  restaurantId    Int
  image           Image?                 @relation(fields: [imageId], references: [id])
  imageId         String?
  OrderItem       OrderItem[]
}

model ProductVariant {
  id                   String                 @id @default(uuid())
  variant              Variant                @relation(fields: [variantId], references: [id])
  variantId            String
  productVariantOption ProductVariantOption[]
  product              Product?               @relation(fields: [productId], references: [id])
  productId            String?
}

model ProductVariantOption {
  id                      String                    @id @default(uuid())
  mrp                     Float                     @default(0)
  stock                   Int                       @default(0)
  remainingStock          Int                       @default(0)
  isStockout              Boolean                   @default(false)
  productVariant          ProductVariant?           @relation(fields: [productVariantId], references: [id])
  productVariantId        String?
  variantOption           VariantOption             @relation(fields: [variantOptionId], references: [id])
  variantOptionId         String
  product                 Product?                  @relation(fields: [productId], references: [id])
  productId               String?
  OrderItemVariantOptions OrderItemVariantOptions[]
}

model Variant {
  id              String           @id @default(uuid())
  title           String
  slug            String           @unique
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  variantOptions  VariantOption[]
  productVariants ProductVariant[]
}

model VariantOption {
  id                   String                 @id @default(uuid())
  title                String
  isActive             Boolean                @default(true)
  variant              Variant?               @relation(fields: [variantId], references: [id])
  variantId            String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  ProductVariantOption ProductVariantOption[]
}

model Order {
  id                String                    @id @default(uuid())
  isActive          Boolean                   @default(true)
  subTotal          Float                     @default(0)
  total             Float                     @default(0)
  dueAmount         Float                     @default(0)
  paidAmount        Float                     @default(0)
  discount          Float                     @default(0)
  vat               Float                     @default(0)
  orderStatus       ENUM_ORDER_STATUS         @default(PENDING)
  paymentStatus     ENUM_ORDER_PAYMENT_STATUS @default(PENDING)
  paymentMethod     ENUM_PAYMENT_TYPE         @default(CASH)
  restaurantInfo    Restaurant                @relation(fields: [restaurantId], references: [id])
  restaurantId      Int
  customerInfo      Json?
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  restaurantTable   RestaurantTable?          @relation(fields: [restaurantTableId], references: [id])
  restaurantTableId String?
  orderItems        OrderItem[]
}

model OrderItem {
  id              String                    @id @default(uuid())
  isActive        Boolean                   @default(true)
  quantity        Int                       @default(0)
  mrp             Float                     @default(0)
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
  product         Product                   @relation(fields: [productId], references: [id])
  productId       String
  variantsOptions OrderItemVariantOptions[]
  order           Order?                    @relation(fields: [orderId], references: [id])
  orderId         String?
}

model OrderItemVariantOptions {
  id                     String               @id @default(uuid())
  OrderItem              OrderItem?           @relation(fields: [orderItemId], references: [id])
  orderItemId            String?
  productVariantOption   ProductVariantOption @relation(fields: [productVariantOptionId], references: [id])
  productVariantOptionId String
}

model Image {
  id             String      @id @default(uuid())
  url            String
  deleteUrl      String
  product        Product[]
  restaurantInfo Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId   Int?
}

enum Role {
  USER
  ADMIN
}

enum ENUM_ORDER_STATUS {
  PENDING
  CONFIRMED
  PROCESSING
  OUT_FOR_DELIVERY
  CANCELLED
  DELIVERED
  RETURNED
  REFUNDED
}

enum ENUM_ORDER_PAYMENT_STATUS {
  PENDING
  PAID
  DELIVERY_CHARGE_PAID
  FAILED
}

enum ENUM_PAYMENT_TYPE {
  CASH
  GAZEPAY
}
